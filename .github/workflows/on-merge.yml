name: On merge

on:
  pull_request:
    branches: [master]
    types: [closed]

jobs:
  generate-docs:
    name: 'generate docs and push'
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2-beta
      with:
        ref: master
        token: ${{ secrets.GITHUB_TOKEN_REPO_WRITE }}

    - name: Git config
      run: |
        git config user.name "Github actions"
        git config user.email "github-actions@iadvize.com"

    - name: Fetch or create gh-pages
      run: |
        if git fetch origin gh-pages; then
          git branch --track gh-pages origin/gh-pages
        else
          git checkout --orphan gh-pages

          git reset .
          git commit --allow-empty -m "Init"

          git push origin gh-pages

          git checkout -f master
        fi

    - uses: actions/setup-node@v1
      with:
        node-verion: '12.x'

    - name: Install
      run: npm ci

    - name: Generate new docs
      run: |
        npm run docs

    - name: Push gh-pages
      run: |
        git worktree add gh-pages-content gh-pages
        cp -r docs/* gh-pages-content
        cd gh-pages-content

        git add .
        git commit -m "documentation: generate new documentation"
        git push origin gh-pages

  publish-beta:
    name: 'create beta version and deploy'
    runs-on: ubuntu-18.04

    needs:
    - generate-docs

    if:
      github.event.pull_request.merged == true && !(
        contains(github.event.pull_request.labels.*.name, 'patch')
      || contains(github.event.pull_request.labels.*.name, 'minor')
      || contains(github.event.pull_request.labels.*.name, 'major')
      )

    steps:
    - uses: actions/checkout@v2-beta
      with:
        ref: master
        token: ${{ secrets.GITHUB_TOKEN_REPO_WRITE }}

    - name: Git config
      run: |
        git config user.name "Github actions"
        git config user.email "github-actions@iadvize.com"

    - uses: actions/setup-node@v1
      with:
        node-verion: '12.x'

    - name: Install
      run: npm ci

    - name: Set beta version
      id: version
      run: |
        npm version prerelease --preid=beta
        git push
        git push --tags

    - name: Push on master
      id: push
      run: |
        git push
        git push --tags

        COMMIT_ID=$(git rev-parse HEAD)
        echo "::set-output name=ref::$COMMIT_ID"

        VERSION=$(cat package.json | jq -r '.version')
        echo "::set-output name=version::$VERSION"

        NAME=$(cat package.json | jq -r '.name')
        echo "::set-output name=name::$NAME"

    - name: Create deployment
      id: deployment
      uses: actions/github-script@0.4.0
      env:
        REF: ${{ steps.push.outputs.ref }}
        VERSION: ${{ steps.push.outputs.VERSION }}
        NAME: ${{ steps.push.outputs.NAME }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN_REPO_WRITE }}
        previews: 'ant-man-preview,flash-preview'
        script: |
          const name = process.env.name;
          const version = process.env.VERSION;

          const { data: deployment } = await github.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `v${version}`,
            environment: 'npm',
            auto_merge: false,
            required_contexts: [],
            payload: {
              version,
              name,
              ref: process.env.REF,
              npmTag: 'beta',
            },
            description: `Deploy ${name}@${version} on npm`,
            production_environment: true,
          });

  publish-latest:
    name: 'create latest version and deploy'
    runs-on: ubuntu-18.04

    needs:
    - generate-docs

    if:
      github.event.pull_request.merged == true && (
        contains(github.event.pull_request.labels.*.name, 'patch')
      || contains(github.event.pull_request.labels.*.name, 'minor')
      || contains(github.event.pull_request.labels.*.name, 'major')
      )

    steps:
    - uses: actions/checkout@v2-beta
      with:
        ref: master
        token: ${{ secrets.GITHUB_TOKEN_REPO_WRITE }}

    - name: Git config
      run: |
        git config user.name "Github actions"
        git config user.email "github-actions@iadvize.com"

    - uses: actions/setup-node@v1
      with:
        node-verion: '12.x'

    - name: Install
      run: npm ci

    - name: Extract version label
      id: extract-version-label
      uses: actions/github-script@0.4.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const versionLabels = [
            'patch',
            'minor',
            'major',
          ];

          const labels = context.payload.pull_request.labels;

          const versionLabelsPresent = labels
            .filter(label => versionLabels.includes(label.name))

          console.log(`::debug ::${versionLabelsPresent.length} matching labels`);

          if (versionLabelsPresent.length > 1) {
            throw new Error('Pull request should have only one version label');
          }

          if (versionLabelsPresent.length === 1) {
            console.log('::set-output name=version-changed::true');
            console.log(`::set-output name=label::${versionLabelsPresent[0].name}`)
            return;
          }

          console.log('::set-output name=version-changed::false');

    - name: Bumb version
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        BUMP_TYPE: ${{ steps.extract-version-label.outputs.label }}
      run: |
        npm --no-git-tag-version version $BUMP_TYPE

        VERSION=$(cat package.json | jq -r '.version')

        npm run bump-changelog

        git add package.json CHANGELOG.md
        git commit -m "$VERSION"

        git tag "v$VERSION"

    - name: Push on master
      id: push
      run: |
        git push
        git push --tags

        COMMIT_ID=$(git rev-parse HEAD)
        echo "::set-output name=ref::$COMMIT_ID"

        VERSION=$(cat package.json | jq -r '.version')
        echo "::set-output name=version::$VERSION"

        NAME=$(cat package.json | jq -r '.name')
        echo "::set-output name=name::$NAME"

    - name: Create deployment
      id: deployment
      uses: actions/github-script@0.4.0
      env:
        REF: ${{ steps.push.outputs.ref }}
        VERSION: ${{ steps.push.outputs.VERSION }}
        NAME: ${{ steps.push.outputs.NAME }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN_REPO_WRITE }}
        previews: 'ant-man-preview,flash-preview'
        script: |
          const name = process.env.NAME;
          const version = process.env.VERSION;

          const { data: deployment } = await github.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `v${version}`,
            environment: 'npm',
            auto_merge: false,
            required_contexts: [],
            payload: {
              version,
              name,
              ref: process.env.REF,
              npmTag: 'latest',
            },
            description: `Deploy ${name}@${version} on npm`,
            production_environment: true,
          });

    - name: Extract release changelog
      id: extract-changelog
      run: |
        VERSION=$(cat package.json | jq -r '.version')
        VERSION_PART=$(sed -n "/## \[$VERSION\]/,/## \[/{/## \[/d;p;}" CHANGELOG.md)

        VERSION_PART="${VERSION_PART//'%'/'%25'}"
        VERSION_PART="${VERSION_PART//$'\n'/'%0A'}"
        VERSION_PART="${VERSION_PART//$'\r'/'%0D'}"
        echo VERSION_PART=$VERSION_PART

        echo "::set-output name=version-part::$VERSION_PART"

    - name: Create Release
      uses: actions/github-script@0.4.0
      env:
        VERSION: ${{ steps.push.outputs.version }}
        BODY: ${{ steps.extract-changelog.outputs.version-part }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${process.env.VERSION}`,
            name: process.env.TAG,
            body: process.env.BODY,
            draft: false,
            prerelease: false,
          })
